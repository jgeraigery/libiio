# If you make changes to builds or artifacts, please check and update the following files if needed:
# README.md, CI/azure/prepare_assets.sh, artifact_manifest.txt.cmakein, CI/publish_deps.ps1

trigger:
  branches:
    include:
    - main
    - master
    - staging/*
    - 20*
  tags:
    include:
    - v*

pr:
  branches:
    include:
    - main
    - master
    - 20*

stages:
- stage: Builds
  #############################################
  # Builds
  #############################################
  jobs:
  - job: LinuxBuilds
    # Host Box
    pool:
      vmImage: 'ubuntu-latest'
    # Docker Images
    strategy:
      matrix:
        ubuntu_18_04:
          image: 'tfcollins/libiio_ubuntu_18_04-ci:latest'
          artifactName: 'Linux-Ubuntu-18.04'
        ubuntu_20_04:
          image: 'tfcollins/libiio_ubuntu_20_04-ci:latest'
          artifactName: 'Linux-Ubuntu-20.04'
        ubuntu_22_04:
          image: 'tfcollins/libiio_ubuntu_22_04-ci:latest'
          artifactName: 'Linux-Ubuntu-22.04'        
        fedora34:
          image: 'tfcollins/libiio_fedora_34-ci:latest'
          artifactName: 'Linux-Fedora-34'
    container: $[ variables['image'] ]
    steps:
    - checkout: self
      fetchDepth: 1
      clean: true
      persistCredentials: true
    - script: |
        set -e
        mkdir build && cd build
        cmake .. -DENABLE_PACKAGING=ON -DPYTHON_BINDINGS=ON -DWITH_DOC=ON -DWITH_MAN=ON -DCPACK_SYSTEM_NAME=${ARTIFACTNAME}
        make
        make package
      displayName: 'Build'
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build/'
        contents: '$(Agent.BuildDirectory)/s/build/?(*.deb|*.gz|*.rpm)'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - script: |
        cd $(Agent.BuildDirectory)/s/build/
        sh generateDocumentationAndDeploy.sh
      displayName: 'Documentation'
      condition: eq(variables['artifactName'], 'Linux-Fedora-34')
    - script: ./CI/azure/check_kernel.sh
      displayName: 'Kernel check'
      condition: and(eq(variables['artifactName'], 'Linux-Ubuntu-22.04'), eq(variables['Build.Reason'], 'PullRequest'))
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'

  #############################################
  - job: WindowsBuilds
    # Host Box
    strategy:
      matrix:
        VS2022:
          vmImage: 'windows-2022'
          COMPILER: 'Visual Studio 17 2022'
          ARCH: 'x64'
          artifactName: 'Windows-VS-2022-x64'
        VS2019:
          vmImage: 'windows-2019'
          COMPILER: 'Visual Studio 16 2019'
          ARCH: 'x64'
          artifactName: 'Windows-VS-2019-x64'
    pool:
      vmImage: $[ variables['vmImage'] ]
    steps:
    - checkout: self
      fetchDepth: 1
      clean: true
    - task: UsePythonVersion@0.206.0
      inputs:
        versionSpec: '3.9'
    - task: PowerShell@2
      displayName: 'Dependencies'
      inputs:
        targetType: inline
        script: |
          git submodule update --init
          if ( !( Test-Path deps ) ) {
            mkdir deps
          }
          cd deps
          mkdir libxml
          wget https://www.zlatkovic.com/pub/libxml/64bit/libxml2-2.9.3-win32-x86_64.7z -OutFile "libxml.7z"
          7z x -y libxml.7z
          rm libxml.7z
          cd C:\
          wget http://swdownloads.analog.com/cse/build/libiio-win-deps-libusb1.0.24.zip -OutFile "libiio-win-deps.zip"
          7z x -y "C:\libiio-win-deps.zip"
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: .\CI\build_win.ps1
      displayName: 'Build'
    - task: CopyFiles@2
      displayName: 'Copy libraries'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build-$(ARCH)/Release'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy iio.h header'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/'
        contents: 'iio.h'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy .exe files'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build-$(ARCH)/tests/Release'
        contents: '*.exe'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy .tar.gz files'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build-x64/bindings/python'
        contents: '*.gz'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy libiio-sharp.dll file'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build-$(ARCH)/bindings/csharp'
        contents: 'libiio-sharp.dll'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PowerShell@2
      displayName: 'Copy dependencies'
      inputs:
        targetType: 'filePath'
        filePath: .\CI\publish_deps.ps1
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'

  #############################################
  - job: GenerateSetupExe
    dependsOn: WindowsBuilds
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        path: '$(Build.ArtifactStagingDirectory)'
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: .\CI\generate_exe.ps1
      displayName: 'Generate libiio-setup.exe'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'Libiio-Setup-Exe'

  #############################################
  - job: macOSBuilds
    # Host Box
    strategy:
      matrix:
        macOS_11:
          vmImage: 'macOS-11'
          artifactName: 'macOS-11'
        macOS_12:
          vmImage: 'macOS-12'
          artifactName: 'macOS-12'
    pool:
      vmImage: $[ variables['vmImage'] ]
    steps:
    - checkout: self
      fetchDepth: 1
      clean: true
    - task: UsePythonVersion@0.206.0
      inputs:
        versionSpec: '3.x'
        addToPath: true
    - script: |
          set -e
          brew install doxygen libusb libxml2 ncurses cdk libserialport sphinx-doc
          pip3 install sphinx
      displayName: 'Dependencies'
    - script: |
        set -e
        mkdir build && cd build
        cmake .. -DOSX_PACKAGE=ON -DPYTHON_BINDINGS=ON -DWITH_EXAMPLES=ON -DWITH_SERIAL_BACKEND=OFF -DWITH_ZSTD=OFF
        make
        sudo make install
        cd ..
      displayName: 'Build'
    - script: |
        set -e
        mkdir build_tar && cd build_tar
        cmake .. -DOSX_PACKAGE=OFF -DENABLE_PACKAGING=ON -DPYTHON_BINDINGS=ON -DWITH_SERIAL_BACKEND=OFF -DWITH_ZSTD=OFF -DCPACK_SYSTEM_NAME=${ARTIFACTNAME}
        make
        make package
        cd ..
      displayName: 'Build tar'
    - script: |
        set -e
        cd build
        cmake .. -DPYTHON_BINDINGS=ON -DWITH_DOC=ON
        make
        cd ..
      displayName: 'Build With Doc'
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build/'
        contents: '$(Agent.BuildDirectory)/s/build/?(*.pkg)'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build_tar/'
        contents: '$(Agent.BuildDirectory)/s/build_tar/?(*.gz)'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'

  #############################################
  - job: ARMBuilds
    # Host Box
    pool:
      vmImage: "ubuntu-latest"
    # Docker Images
    strategy:
      matrix:
        ubuntu-ppc64le:
          image: tfcollins/libiio_ubuntu_18_04-ci-arm-ppc:latest
          arch: ppc64le
          build_script: ci-ubuntu.sh
          artifactName: 'Ubuntu-ppc64le'
        ubuntu-x390x:
          image: tfcollins/libiio_ubuntu_18_04-ci-arm-ppc:latest
          arch: s390x
          build_script: ci-ubuntu.sh
          artifactName: 'Ubuntu-x390x'
        ubuntu-arm64v8:
          image: tfcollins/libiio_ubuntu_18_04-ci-arm-ppc:latest
          arch: aarch64
          build_script: ci-ubuntu.sh
          artifactName: 'Ubuntu-arm64v8'
        ubuntu-arm32v7:
          image: tfcollins/libiio_ubuntu_18_04-ci-arm-ppc:latest
          arch: arm
          build_script: ci-ubuntu.sh
          artifactName: 'Ubuntu-arm32v7'
    steps:
    - script: |
        set -e
        sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armhf-cross
        sudo apt-get install -y g++-arm-linux-gnueabihf
        sudo apt-get install -y g++-aarch64-linux-gnu
        sudo apt-get install -y qemu-system-ppc64
        sudo apt-get install qemu
        sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      displayName: 'Setup'
    - script: |
        set -e
        sudo docker run --platform "linux/$(arch)" --rm -t --privileged -e ARTIFACTNAME=$(artifactName) -v "$(Agent.BuildDirectory)/s":"/ci" -v "/usr/bin/qemu-$(arch)-static":"/usr/bin/qemu-$(arch)-static" "$(image)" /bin/bash -c "cd /ci/ && chmod +x ./CI/azure/$(build_script) && ./CI/azure/$(build_script)"
      displayName: 'Build'
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build/'
        contents: '$(Agent.BuildDirectory)/s/build/?(*.deb|*.gz)'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'

  #############################################
- stage: ManageArtifacts
  dependsOn: Builds
  #############################################
  # Deploy
  #############################################
  jobs:
  - job: CheckArtifacts
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v')))
    # Host Box
    pool:
      vmImage: 'ubuntu-latest'
    # Docker Images
    strategy:
      matrix:
        ubuntu_20_04:
          image: 'tfcollins/libiio_ubuntu_20_04-ci:latest'
          artifactName: 'Check artifacts'
    container: $[ variables['image'] ]
    steps:
    - script: |
        set -e
        mkdir build && cd build
        cmake ..
        mkdir artifacts
      displayName: 'Build artifact manifest'
    - task: DownloadPipelineArtifact@2
      inputs:
        path: '$(Agent.BuildDirectory)/s/build/artifacts'
    - script: ./CI/azure/prepare_assets.sh check
      displayName: 'Check files'
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build/'
        contents: 'artifact_manifest.txt'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'Artifact manifest'

  #############################################  
  - job: PushToSWDownloads
    dependsOn: CheckArtifacts
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        path: '$(Build.ArtifactStagingDirectory)'
    - bash: ./CI/azure/prepare_assets.sh swdownloads
      displayName: "Prepare artifacts for SWDownloads"
    - task: DownloadSecureFile@1
      name: key
      displayName: 'Download rsa key'
      inputs:
        secureFile: 'id_rsa'
    - bash: chmod 600 $(key.secureFilePath) ; scp -2 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o HostKeyAlgorithms=+ssh-dss -i $(key.secureFilePath) -r /home/vsts/work/1/a/* $MAPPED_VAR
      env:
        MAPPED_VAR: $(SERVER_ADDRESS)
      displayName: 'Push artifacts to SW Downloads'

  ##############################################
  - job: PushToGithubRelease
    dependsOn: CheckArtifacts
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        path: '$(Build.ArtifactStagingDirectory)'
    - bash: ./CI/azure/prepare_assets.sh release
      displayName: 'Prepare assets for release'
    - task: GithubRelease@0
      displayName: 'Attach artifacts to GitHub Release'
      inputs:
        gitHubConnection: libiio-release
        repositoryName: $(Build.Repository.Name)
        action: create
        target: $(Build.SourceVersion)
        tag: $(Build.SourceBranchName)
        title: "Libiio release $(Build.SourceBranchName)"
        assets: $(Build.ArtifactStagingDirectory)/*
        addChangeLog: true
        isDraft: true
